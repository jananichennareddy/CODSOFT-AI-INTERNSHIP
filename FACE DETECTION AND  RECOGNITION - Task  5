{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMoE6TEXpvTp5zE5qggdhep",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jananichennareddy/CODSOFT-AI-INTERNSHIP/blob/main/FACE%20DETECTION%20AND%20%20RECOGNITION%20-%20TASK%20-%205\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "ayj-3dNkjKiL",
        "outputId": "486c4531-2ba1-4dc6-96b2-f23ae90582d9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "===== Face Detection & Recognition App =====\n",
            "1. Collect Faces\n",
            "2. Train Model\n",
            "3. Recognize Faces\n",
            "Enter choice (1/2/3): 1\n",
            "Enter person name: Janani\n",
            "Enter numeric ID: 270505\n",
            "Capturing faces...\n",
            "✅ Captured 0 images for Janani\n"
          ]
        }
      ],
      "source": [
        "import cv2\n",
        "import os\n",
        "import csv\n",
        "import numpy as np\n",
        "from pathlib import Path\n",
        "from google.colab.patches import cv2_imshow # Import cv2_imshow\n",
        "\n",
        "# Global paths\n",
        "DATASET_DIR = Path(\"dataset\")\n",
        "LABELS_FILE = Path(\"labels.csv\")\n",
        "MODEL_FILE = \"model.yml\"\n",
        "CASCADE_PATH = cv2.data.haarcascades + \"haarcascade_frontalface_default.xml\"\n",
        "\n",
        "# ----------------- Collect Faces -----------------\n",
        "def collect_faces(person_name, person_id, num_samples=40):\n",
        "    DATASET_DIR.mkdir(parents=True, exist_ok=True)\n",
        "    person_dir = DATASET_DIR / person_name\n",
        "    person_dir.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "    # Save labels\n",
        "    labels = {}\n",
        "    if LABELS_FILE.exists():\n",
        "        with open(LABELS_FILE, newline='') as f:\n",
        "            reader = csv.reader(f)\n",
        "            labels = {rows[0]: rows[1] for rows in reader}\n",
        "    labels[str(person_id)] = person_name\n",
        "    with open(LABELS_FILE, \"w\", newline='') as f:\n",
        "        writer = csv.writer(f)\n",
        "        for k, v in labels.items():\n",
        "            writer.writerow([k, v])\n",
        "\n",
        "    cam = cv2.VideoCapture(0)\n",
        "    face_cascade = cv2.CascadeClassifier(CASCADE_PATH)\n",
        "    count = 0\n",
        "\n",
        "    print(\"Capturing faces...\")\n",
        "    while count < num_samples:\n",
        "        ret, frame = cam.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
        "        faces = face_cascade.detectMultiScale(gray, 1.1, 5)\n",
        "        for (x, y, w, h) in faces:\n",
        "            count += 1\n",
        "            face = cv2.resize(gray[y:y+h, x:x+w], (200, 200))\n",
        "            cv2.imwrite(f\"{person_dir}/{person_id}_{count}.jpg\", face)\n",
        "            cv2.rectangle(frame, (x, y), (x+w, y+h), (0,255,0), 2)\n",
        "            cv2.putText(frame, f\"{person_name} {count}\", (x,y-10),\n",
        "                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0,255,0), 2)\n",
        "        # cv2.imshow(\"Collect Faces\", frame) # Removed\n",
        "        # if cv2.waitKey(1) & 0xFF == ord('q'): # Removed\n",
        "        #     break # Removed\n",
        "\n",
        "    cam.release()\n",
        "    # cv2.destroyAllWindows() # Removed\n",
        "    print(f\"✅ Captured {count} images for {person_name}\")\n",
        "\n",
        "# ----------------- Train Model -----------------\n",
        "def train_model():\n",
        "    faces, ids = [], []\n",
        "\n",
        "    # Load labels\n",
        "    labels = {}\n",
        "    if LABELS_FILE.exists():\n",
        "        with open(LABELS_FILE, newline='') as f:\n",
        "            reader = csv.reader(f)\n",
        "            labels = {rows[0]: rows[1] for rows in reader}\n",
        "\n",
        "    # Load dataset\n",
        "    for folder in DATASET_DIR.iterdir():\n",
        "        if not folder.is_dir():\n",
        "            continue\n",
        "        for img_path in folder.glob(\"*.jpg\"):\n",
        "            img = cv2.imread(str(img_path), cv2.IMREAD_GRAYSCALE)\n",
        "            if img is None:\n",
        "                continue\n",
        "            try:\n",
        "                label_id = int(img_path.stem.split(\"_\")[0])\n",
        "            except:\n",
        "                continue\n",
        "            faces.append(img)\n",
        "            ids.append(label_id)\n",
        "\n",
        "    if not faces:\n",
        "        print(\"❌ No dataset found. Please collect faces first.\")\n",
        "        return\n",
        "\n",
        "    # Train LBPH\n",
        "    recognizer = cv2.face.LBPHFaceRecognizer_create()\n",
        "    recognizer.train(faces, np.array(ids))\n",
        "    recognizer.save(MODEL_FILE)\n",
        "\n",
        "    print(f\"✅ Model trained and saved as {MODEL_FILE}\")\n",
        "\n",
        "# ----------------- Recognize Faces -----------------\n",
        "def recognize_faces():\n",
        "    if not Path(MODEL_FILE).exists():\n",
        "        print(\"❌ No trained model found. Please train model first.\")\n",
        "        return\n",
        "\n",
        "    # Load labels\n",
        "    labels = {}\n",
        "    if LABELS_FILE.exists():\n",
        "        with open(LABELS_FILE, newline='') as f:\n",
        "            reader = csv.reader(f)\n",
        "            labels = {int(r[0]): r[1] for r in reader}\n",
        "\n",
        "    # Load model\n",
        "    face_cascade = cv2.CascadeClassifier(CASCADE_PATH)\n",
        "    recognizer = cv2.face.LBPHFaceRecognizer_create()\n",
        "    recognizer.read(MODEL_FILE)\n",
        "\n",
        "    cam = cv2.VideoCapture(0)\n",
        "    print(\"Press 'q' to quit recognition.\") # This will not work in Colab\n",
        "\n",
        "    while True:\n",
        "        ret, frame = cam.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
        "        faces = face_cascade.detectMultiScale(gray, 1.1, 5)\n",
        "\n",
        "        for (x, y, w, h) in faces:\n",
        "            face = cv2.resize(gray[y:y+h, x:x+w], (200, 200))\n",
        "            label_id, confidence = recognizer.predict(face)\n",
        "\n",
        "            if confidence < 80:  # threshold\n",
        "                name = labels.get(label_id, f\"ID {label_id}\")\n",
        "                text = f\"{name} ({confidence:.1f})\"\n",
        "                color = (0,255,0)\n",
        "            else:\n",
        "                text = f\"Unknown ({confidence:.1f})\"\n",
        "                color = (0,0,255)\n",
        "\n",
        "            cv2.rectangle(frame, (x,y), (x+w,y+h), color, 2)\n",
        "            cv2.putText(frame, text, (x,y-10),\n",
        "                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)\n",
        "\n",
        "        # cv2.imshow(\"Face Recognition\", frame) # Removed\n",
        "        # if cv2.waitKey(1) & 0xFF == ord('q'): # Removed\n",
        "        #     break # Removed\n",
        "\n",
        "    cam.release()\n",
        "    # cv2.destroyAllWindows() # Removed\n",
        "\n",
        "# ----------------- Main -----------------\n",
        "if __name__ == \"__main__\":\n",
        "    print(\"\\n===== Face Detection & Recognition App =====\")\n",
        "    print(\"1. Collect Faces\")\n",
        "    print(\"2. Train Model\")\n",
        "    print(\"3. Recognize Faces\")\n",
        "    choice = input(\"Enter choice (1/2/3): \")\n",
        "\n",
        "    if choice == \"1\":\n",
        "        name = input(\"Enter person name: \")\n",
        "        pid = input(\"Enter numeric ID: \")\n",
        "        collect_faces(name, pid, num_samples=40)\n",
        "    elif choice == \"2\":\n",
        "        train_model()\n",
        "    elif choice == \"3\":\n",
        "        recognize_faces()\n",
        "    else:\n",
        "        print(\"❌ Invalid choice\")"
      ]
    }
  ]
}
